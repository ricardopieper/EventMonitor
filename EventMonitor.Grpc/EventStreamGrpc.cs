// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: EventStream.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace EventMonitor.Grpc {
  public static partial class EventStream
  {
    static readonly string __ServiceName = "EventMonitor.Grpc.EventStream";

    static readonly grpc::Marshaller<global::EventMonitor.Grpc.Event> __Marshaller_Event = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EventMonitor.Grpc.Event.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::EventMonitor.Grpc.Acknowledgement> __Marshaller_Acknowledgement = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::EventMonitor.Grpc.Acknowledgement.Parser.ParseFrom);

    static readonly grpc::Method<global::EventMonitor.Grpc.Event, global::EventMonitor.Grpc.Acknowledgement> __Method_Push = new grpc::Method<global::EventMonitor.Grpc.Event, global::EventMonitor.Grpc.Acknowledgement>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Push",
        __Marshaller_Event,
        __Marshaller_Acknowledgement);

    static readonly grpc::Method<global::EventMonitor.Grpc.Event, global::EventMonitor.Grpc.Acknowledgement> __Method_PushStream = new grpc::Method<global::EventMonitor.Grpc.Event, global::EventMonitor.Grpc.Acknowledgement>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "PushStream",
        __Marshaller_Event,
        __Marshaller_Acknowledgement);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::EventMonitor.Grpc.EventStreamReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of EventStream</summary>
    public abstract partial class EventStreamBase
    {
      public virtual global::System.Threading.Tasks.Task<global::EventMonitor.Grpc.Acknowledgement> Push(global::EventMonitor.Grpc.Event request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::EventMonitor.Grpc.Acknowledgement> PushStream(grpc::IAsyncStreamReader<global::EventMonitor.Grpc.Event> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for EventStream</summary>
    public partial class EventStreamClient : grpc::ClientBase<EventStreamClient>
    {
      /// <summary>Creates a new client for EventStream</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EventStreamClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EventStream that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EventStreamClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EventStreamClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EventStreamClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::EventMonitor.Grpc.Acknowledgement Push(global::EventMonitor.Grpc.Event request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Push(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::EventMonitor.Grpc.Acknowledgement Push(global::EventMonitor.Grpc.Event request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Push, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::EventMonitor.Grpc.Acknowledgement> PushAsync(global::EventMonitor.Grpc.Event request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PushAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::EventMonitor.Grpc.Acknowledgement> PushAsync(global::EventMonitor.Grpc.Event request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Push, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::EventMonitor.Grpc.Event, global::EventMonitor.Grpc.Acknowledgement> PushStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PushStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::EventMonitor.Grpc.Event, global::EventMonitor.Grpc.Acknowledgement> PushStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_PushStream, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EventStreamClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EventStreamClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(EventStreamBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Push, serviceImpl.Push)
          .AddMethod(__Method_PushStream, serviceImpl.PushStream).Build();
    }

  }
}
#endregion
